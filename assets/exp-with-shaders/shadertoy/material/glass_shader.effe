// Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.  

CCEffect %{
  techniques:
  - passes:
    - vert: vs
      frag: fs
      blendState:
        targets:
        - blend: true
      rasterizerState:
        cullMode: none
      properties:
        Effect_Ratio : { value: 0.5 }
        Effect_Position : { value: [1, 1] }
        Effect_Size : { value: 0.25 }
        Width_Scale: { value: 0.66 }
        texture: { value: white }
        alphaThreshold: { value: 0.5 }
}%


CCProgram vs %{
  precision highp float;

  #include <cc-global>
  #include <cc-local>

  in vec3 a_position;
  in vec4 a_color;
  out vec4 v_color;

  #if USE_TEXTURE
  in vec2 a_uv0;
  out vec2 v_uv0;
  #endif

  void main () {
    vec4 pos = vec4(a_position, 1);

    #if CC_USE_MODEL
    pos = cc_matViewProj * cc_matWorld * pos;
    #else
    pos = cc_matViewProj * pos;
    #endif

    #if USE_TEXTURE
    v_uv0 = a_uv0;
    #endif

    v_color = a_color;

    gl_Position = pos;
  }
}%


CCProgram fs %{
  precision highp float;
  
  #include <alpha-test>
  #include <texture>

  in vec4 v_color;

  #if USE_TEXTURE
  in vec2 v_uv0;
  uniform sampler2D texture;
  #endif

  uniform GDG_Input {
    vec2 Effect_Position;
    float Effect_Ratio;
    float Effect_Size;
    float Width_Scale;
  };


  void main () {
    vec4 o = vec4(1, 1, 1, 1);

    vec2 fx_pos = (Effect_Position*vec2(1,-1) + vec2(0.5,0.5));
    vec2 org_pos = (v_uv0 - fx_pos);
    vec2 p = org_pos*vec2(1.0/Width_Scale,1);
  
    float rad = length(p)/(Effect_Size);
    float a = atan(p.y, p.x);

    float r = rad*rad*3.0;
    p = r * vec2(cos(a)*0.5, sin(a)*0.5);

    if(rad < Effect_Size*0.75){
      p = mix(org_pos,p,Effect_Ratio)+fx_pos;
    }else{
      p = v_uv0;
    }

    
    #if USE_TEXTURE
      CCTexture(texture, p , o);
    #endif

    o *= v_color;

    ALPHA_TEST(o);

    gl_FragColor = o;
  }
}%
